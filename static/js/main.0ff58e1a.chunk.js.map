{"version":3,"sources":["components/Display.js","components/FourValues.js","components/EightValues.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","handleClick","bind","result","React","createRef","this","current","select","setSelectionRange","document","execCommand","console","log","style","className","type","ref","readOnly","value","onClick","Component","FourValues","state","top","right","bottom","left","changeVal","raggiox00","valueAsNumber","raggioy00","raggiox01","raggioy01","raggiox11","raggioy11","raggiox10","raggioy10","setState","val","onInput","min","max","step","defaultValue","borderRadius","EightValues","rightRight","rightLeft","leftRight","leftLeft","topRight","topLeft","bottomRight","bottomLeft","Title","App","handleChange","e","title","target","selectedOptions","label","showFour","componentDidMount","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0ff58e1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.result = React.createRef();\n  }\n\n  handleClick() {\n    /* Select the text field */\n    this.result.current.select();\n    this.result.current.setSelectionRange(0, 99999); /*For mobile devices*/\n\n    /* Copy the text inside the text field */\n    document.execCommand(\"copy\");\n  }\n\n  render() {\n    console.log(this.props.style);\n    return (\n      <div className=\"resultBox\">\n        <div className=\"row\">\n          <input\n            type=\"text\"\n            ref={this.result}\n            className=\"out\"\n            readOnly\n            value={`border-radius: ${this.props.style}`}\n          ></input>\n        </div>\n        <div className=\"row\">\n          <button onClick={this.handleClick}>Copy code</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport Display from \"./Display\";\n\nclass FourValues extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      style: \"50% 50% 50% 50% / 50% 50% 50% 50%\",\n    };\n\n    this.top = React.createRef();\n    this.right = React.createRef();\n    this.bottom = React.createRef();\n    this.left = React.createRef();\n    this.changeVal = this.changeVal.bind(this);\n  }\n\n  val() {\n    //topLeft\n    let raggiox00 = this.top.current.valueAsNumber;\n    //leftLeft\n    let raggioy00 = this.left.current.valueAsNumber;\n    //topRight\n    let raggiox01 = 100 - this.top.current.valueAsNumber;\n    //rightLeft\n    let raggioy01 = 100 - this.right.current.valueAsNumber;\n    //bottomRight\n    let raggiox11 = 100 - this.bottom.current.valueAsNumber;\n    //rightRight\n    let raggioy11 = this.right.current.valueAsNumber;\n    //bottomLeft\n    let raggiox10 = this.bottom.current.valueAsNumber;\n    //leftRight\n    let raggioy10 = 100 - this.left.current.valueAsNumber;\n\n    return `${raggiox00}% ${raggiox01}% ${raggiox11}% ${raggiox10}% / ${raggioy00}% ${raggioy01}% ${raggioy11}% ${raggioy10}%`;\n  }\n\n  changeVal() {\n    this.setState({\n      style: this.val(),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"cont-width\">\n          <div className=\"cont\">\n            <div className=\"App\">\n              <input\n                type=\"range\"\n                className=\"top\"\n                onInput={this.changeVal}\n                ref={this.top}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"right\"\n                onInput={this.changeVal}\n                ref={this.right}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"bottom\"\n                onInput={this.changeVal}\n                ref={this.bottom}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"left\"\n                onInput={this.changeVal}\n                ref={this.left}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <div\n                style={{ borderRadius: this.state.style }}\n                className=\"border\"\n              ></div>\n            </div>\n            <Display style={this.state.style} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FourValues;\n","import React, { Component } from \"react\";\nimport Display from \"./Display\";\nclass EightValues extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      style: \"50% 50% 50% 50% / 50% 50% 50% 50%\",\n    };\n\n    this.rightRight = React.createRef();\n    this.rightLeft = React.createRef();\n    this.leftRight = React.createRef();\n    this.leftLeft = React.createRef();\n    this.topRight = React.createRef();\n    this.topLeft = React.createRef();\n    this.bottomRight = React.createRef();\n    this.bottomLeft = React.createRef();\n    this.changeVal = this.changeVal.bind(this);\n  }\n\n  val() {\n    let raggiox00 = this.topLeft.current.valueAsNumber;\n    let raggioy00 = this.leftLeft.current.valueAsNumber;\n    let raggiox01 = this.topRight.current.valueAsNumber;\n    let raggioy01 = this.rightLeft.current.valueAsNumber;\n    let raggiox11 = this.bottomRight.current.valueAsNumber;\n    let raggioy11 = this.rightRight.current.valueAsNumber;\n    let raggiox10 = this.bottomLeft.current.valueAsNumber;\n    let raggioy10 = this.leftRight.current.valueAsNumber;\n\n    return `${raggiox00}% ${raggiox01}% ${raggiox11}% ${raggiox10}% / ${raggioy00}% ${raggioy01}% ${raggioy11}% ${raggioy10}%`;\n  }\n\n  changeVal() {\n    this.setState({\n      style: this.val(),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"cont-width\">\n          <div className=\"cont\">\n            <div className=\"App\">\n              <input\n                type=\"range\"\n                className=\"topLeft\"\n                onInput={this.changeVal}\n                ref={this.topLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"topRight\"\n                onInput={this.changeVal}\n                ref={this.topRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"rightLeft\"\n                onInput={this.changeVal}\n                ref={this.rightLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"rightRight\"\n                onInput={this.changeVal}\n                ref={this.rightRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"bottomLeft\"\n                onInput={this.changeVal}\n                ref={this.bottomLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"bottomRight\"\n                onInput={this.changeVal}\n                ref={this.bottomRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"leftLeft\"\n                onInput={this.changeVal}\n                ref={this.leftLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"leftRight\"\n                onInput={this.changeVal}\n                ref={this.leftRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <div\n                style={{ borderRadius: this.state.style }}\n                className=\"border\"\n              ></div>\n            </div>\n            <Display style={this.state.style} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EightValues;\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>CSS border radius visualizer and calculator</h1>\n      {/* <h2>{props.title}</h2> */}\n    </div>\n  );\n};\n\nexport default Title;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport FourValues from \"./components/FourValues\";\nimport EightValues from \"./components/EightValues\";\nimport Title from \"./components/Title\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: \"Eight toggles\",\n      showFour: false,\n    };\n    /* this.selectBox = React.createRef(); */\n  }\n\n  handleChange = (e) => {\n    /* console.log(e.target.selectedOptions[0].label); */\n    this.setState({\n      title: e.target.selectedOptions[0].label,\n      showFour: e.target.value === \"FourValues\",\n    });\n  };\n\n  componentDidMount = () => {};\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"selectArea\">\n          <label>\n            <strong>Select how many toggles do you want to display</strong>\n          </label>\n          <br />\n          <br />\n          <select\n            /*  ref={this.selectBox} */\n            className=\"main\"\n            onChange={this.handleChange}\n          >\n            <option value=\"EightValues\">Eight toggles</option>\n            <option value=\"FourValues\">Four toggles</option>\n          </select>\n        </div>\n        <Title title={this.state.title} />\n        {this.state.showFour ? <FourValues /> : <EightValues />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}