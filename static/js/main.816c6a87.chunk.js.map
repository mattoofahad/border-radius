{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","style","rightRight","React","createRef","rightLeft","leftRight","leftLeft","topRight","topLeft","bottomRight","bottomLeft","changeVal","bind","this","current","raggiox00","valueAsNumber","raggioy00","raggiox01","raggioy01","raggiox10","raggioy10","raggiox11","raggioy11","setState","val","className","class","type","onInput","ref","min","max","step","defaultValue","borderRadius","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.816c6a87.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      style: \"0%\",\n    };\n\n    this.rightRight = React.createRef();\n    this.rightLeft = React.createRef();\n    this.leftRight = React.createRef();\n    this.leftLeft = React.createRef();\n    this.topRight = React.createRef();\n    this.topLeft = React.createRef();\n    this.bottomRight = React.createRef();\n    this.bottomLeft = React.createRef();\n    this.changeVal = this.changeVal.bind(this);\n  }\n  val() {\n    if (\n      this.topLeft.current &&\n      this.topRight.current &&\n      this.bottomLeft.current &&\n      this.bottomRight.current &&\n      this.rightLeft.current &&\n      this.rightRight.current &&\n      this.leftLeft.current &&\n      this.leftRight.current\n    ) {\n      let raggiox00 = this.topLeft.current.valueAsNumber;\n      let raggioy00 = this.leftLeft.current.valueAsNumber;\n      let raggiox01 = this.topRight.current.valueAsNumber;\n      let raggioy01 = this.rightLeft.current.valueAsNumber;\n      let raggiox10 = this.bottomLeft.current.valueAsNumber;\n      let raggioy10 = this.leftRight.current.valueAsNumber;\n      let raggiox11 = this.bottomRight.current.valueAsNumber;\n      let raggioy11 = this.rightRight.current.valueAsNumber;\n      return `${raggiox00}% ${raggiox01}% ${raggiox11}% ${raggiox10}% / \n        ${raggioy00}% ${raggioy01}% ${raggioy11}% ${raggioy10}%`;\n    } else {\n      return \"50%\";\n    }\n  }\n  changeVal() {\n    this.setState({\n      style: this.val(),\n    });\n  }\n\n  componentDidMount() {\n    this.setState({ style: this.val() });\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <h1>CSS border radius calculator</h1>\n        <div class=\"cont-width\">\n          <div className=\"cont\">\n            <div className=\"App\">\n              <input\n                type=\"range\"\n                className=\"topLeft\"\n                onInput={this.changeVal}\n                ref={this.topLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"topRight\"\n                onInput={this.changeVal}\n                ref={this.topRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"rightLeft\"\n                onInput={this.changeVal}\n                ref={this.rightLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"rightRight\"\n                onInput={this.changeVal}\n                ref={this.rightRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"bottomLeft\"\n                onInput={this.changeVal}\n                ref={this.bottomLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                class=\"bottomRight\"\n                onInput={this.changeVal}\n                ref={this.bottomRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"leftLeft\"\n                onInput={this.changeVal}\n                ref={this.leftLeft}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <input\n                type=\"range\"\n                className=\"leftRight\"\n                onInput={this.changeVal}\n                ref={this.leftRight}\n                min=\"0\"\n                max=\"100\"\n                step=\"1\"\n                defaultValue=\"50\"\n              />\n              <div\n                style={{ borderRadius: this.state.style }}\n                className=\"border\"\n              ></div>\n            </div>\n            <div className=\"out\">border-radius: {this.state.style}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}